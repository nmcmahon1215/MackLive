<?xml version="1.0" encoding="UTF-8"?>
<project name="macklive" default="all" xmlns:ivy="antlib:org.apache.ivy.ant"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="antlib:org.apache.ivy.ant ">

    <property name="ivy.install.version" value="2.1.0-rc2"/>
    <property name="ivy.dep.file" value="../ivy.xml"/>
    <condition property="ivy.home" value="${env.IVY_HOME}">
        <isset property="env.IVY_HOME"/>
    </condition>
    <property name="ivy.home" value="${user.home}/.ant"/>
    <property name="ivy.jar.dir" value="${ivy.home}/lib"/>
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>
    <property name="lib" value="${basedir}/lib/"/>
    <property name="src" location="src"/>
    <property name="test" location="../MackLiveTest/test"/>
    <property name="testbuild" location="testbuild"/>
    <property name="build" location="${basedir}/../build"/>
    <property name="dist" location="dist"/>

    <target name="download-ivy" unless="offline">

        <mkdir dir="${ivy.jar.dir}"/>
        <!-- download Ivy from web site so that it can be used even without any special installation -->
        <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
             dest="${ivy.jar.file}"
             usetimestamp="true"/>
    </target>

    <target name="init-ivy" depends="download-ivy">
        <!-- try to load ivy here from ivy home, in case the user has not already dropped
                it into ant's lib dir (note that the latter copy will always take precedence).
                We will not fail as long as local lib dir exists (it may be empty) and
                ivy is in at least one of ant's lib dir or the local lib dir. -->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>

        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                 uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>


    <target name="download-deps" depends="init-ivy"
            description="-->download dependecy">
        <ivy:resolve/> <!-- Tell Ivy to resolve dependencies -->
        <ivy:retrieve pattern="${lib}/[artifact](-[classifier]).[ext]"/> <!-- Load dependencies to the project -->
    </target>

    <target name="init">
        <!-- Create the time stamp -->
        <tstamp/>
        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${build}"/>
    </target>


    <path id="external.classpath">
        <fileset dir="${basedir}/lib" includes="*.jar"/>
    </path>

    <target name="compile" depends="init,download-deps"
            description="compile the source">
        <!-- Compile the java code from ${src} into ${build} -->
        <javac includeantruntime="false" srcdir="${src}" destdir="${build}">
            <classpath>
                <path refid="external.classpath"/>
            </classpath>
        </javac>
    </target>

    <target name="clean-test" depends="clean,test"/>

    <target name="test" depends="compile" description="Runs unit tests">
        <mkdir dir="${testbuild}"/>

        <javac includeantruntime="false" srcdir="${test}" destdir="${build}">
            <src path="${src}"/>
            <src path="${test}"/>
            <classpath>
                <path refid="external.classpath"/>
            </classpath>
        </javac>

        <junit printsummary="on" haltonfailure="no" failureproperty="test.failed">
            <formatter type="plain" usefile="false"/>
            <classpath>
                <path refid="external.classpath"/>
                <pathelement path="${build}"/>
            </classpath>
            <test name="com.macklive.JUnitTestSuite"/>
        </junit>
        <fail message="Test failure detected, check test results." if="test.failed"/>
    </target>

    <target name="clean">
        <delete dir="${build}"/>
        <delete dir="${lib}"/>
    </target>

    <target name="clean-all" depends="init-ivy,clean">
        <ivy:cleancache/>
    </target>

    <target name="js.minify" depends="download-deps">
        <apply executable="java" parallel="false" dest="${basedir}">
            <fileset dir="${basedir}" includes="war/main/js/**/*.js"
                     excludes="war/main/js/**/*.min.js,war/main/js/**/*-gen-min.js"/>
            <arg line="-jar"/>
            <arg path="lib/yuicompressor.jar"/>
            <srcfile/>
            <arg line="-o"/>
            <mapper type="glob" from="*.js" to="*-gen-min.js"/>
            <targetfile/>
        </apply>
    </target>

    <target name="css.minify" depends="download-deps,css.minify-nodeps">
    </target>

    <target name="css.minify-nodeps">
        <apply executable="java" parallel="false" dest="${basedir}">
            <fileset dir="${basedir}" includes="war/main/css/**/*.css"
                     excludes="war/main/css/**/*.min.css,war/main/css/**/*-gen-min.css"/>
            <arg line="-jar"/>
            <arg path="lib/yuicompressor.jar"/>
            <srcfile/>
            <arg line="-o"/>
            <mapper type="glob" from="*.css" to="*-gen-min.css"/>
            <targetfile/>
        </apply>
    </target>

    <target name="all" depends="compile"/>
</project>
